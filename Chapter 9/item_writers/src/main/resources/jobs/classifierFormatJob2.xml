<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/batch"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:util="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
					http://www.springframework.org/schema/util 
					http://www.springframework.org/schema/util/spring-util.xsd
					http://www.springframework.org/schema/batch 
	                http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

    <beans:import resource="../launch-context.xml"/>

    <!--<beans:bean id="customerFile" class="org.springframework.core.io.FileSystemResource" scope="step">
        <beans:constructor-arg value="#{jobParameters[customerFile]}"/>
    </beans:bean>

    <beans:bean id="customerFileReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <beans:property name="resource" ref="customerFile"/>
        <beans:property name="lineMapper">
            <beans:bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <beans:property name="lineTokenizer">
                    <beans:bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <beans:property name="names"
                            value="firstName,middleInitial,lastName,address,city,state,zip,email"/>
                        <beans:property name="delimiter" value=","/>
                    </beans:bean>
                </beans:property>
                <beans:property name="fieldSetMapper">
                    <beans:bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <beans:property name="prototypeBeanName" value="customer"/>
                     </beans:bean>
                </beans:property>
            </beans:bean>
        </beans:property>
    </beans:bean>-->

    <beans:bean id="customerItemReader" class="org.springframework.batch.item.adapter.ItemReaderAdapter">
        <beans:property name="targetObject" ref="customerBuilder"/>
        <beans:property name="targetMethod" value="getCustomer"/>
    </beans:bean>

    <beans:bean id="customerBuilder" class="com.apress.springbatch.chapter9.CustomerBuilder"/>

    <beans:bean id="customer" class="com.apress.springbatch.chapter9.Customer" scope="prototype"/>

    <beans:bean id="outputFile" class="org.springframework.core.io.FileSystemResource">
        <beans:constructor-arg value="/output/stockFile.csv"/>
    </beans:bean>

    <!--<beans:bean id="xmlOutputWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
        <beans:property name="resource" ref="outputFile" />
        <beans:property name="marshaller" ref="customerMarshaller" />
        <beans:property name="rootTagName" value="customers" />
    </beans:bean>
-->
    <!--	<beans:bean id="customerMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
            <beans:property name="aliases">
                <util:map>
                    <beans:entry key="customer" value="com.apress.springbatch.chapter9.Customer" />
                </util:map>
            </beans:property>
        </beans:bean>-->

    <!--	<beans:bean id="jdbcBatchWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
            <beans:property name="dataSource" ref="dataSource"/>
            <beans:property name="sql" value="insert into customer (firstName, middleInitial, lastName, address, city, state, zip, email) values (?, ?, ?, ?, ?, ?, ?, ?)"/>
            <beans:property name="itemPreparedStatementSetter" ref="preparedStatementSetter"/>
        </beans:bean>-->

    <!--<beans:bean id="preparedStatementSetter" class="com.apress.springbatch.chapter9.CustomerItemPreparedStatementSetter"/>
-->
    <beans:bean id="customerClassifier" class="com.apress.springbatch.chapter9.CustomerClassifier">
        <beans:property name="customerItemWriter" ref="flatFileOutputWriter1"/>
        <beans:property name="prospectItemWriter" ref="flatFileOutputWriter2"/>
    </beans:bean>

    <beans:bean id="flatFileOutputWriter1" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <beans:property name="resource" ref="outputFile" />
        <beans:property name="lineAggregator" ref="formattedLineAggregator1"/>
    </beans:bean>

    <beans:bean id="flatFileOutputWriter2" class="org.springframework.batch.item.file.FlatFileItemWriter">
        <beans:property name="resource" ref="outputFile" />
        <beans:property name="lineAggregator" ref="formattedLineAggregator2"/>
    </beans:bean>

    <beans:bean id="classifierWriter" class="org.springframework.batch.item.support.ClassifierCompositeItemWriter">
        <beans:property name="classifier" ref="customerClassifier"/>
    </beans:bean>

    <beans:bean id="formattedLineAggregator1"
                class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
        <beans:property name="fieldExtractor">
            <beans:bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                <beans:property name="names" value="firstName,lastName,address,city,state,zip"/>
            </beans:bean>
        </beans:property>
        <beans:property name="format" value="%s %s lives at %s %s in %s, %s."/>
    </beans:bean>

    <beans:bean id="formattedLineAggregator2"
                class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
        <beans:property name="fieldExtractor">
            <beans:bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                <beans:property name="names" value="firstName,lastName,state"/>
            </beans:bean>
        </beans:property>
        <beans:property name="format" value="%s %s lives at %s State."/>
    </beans:bean>

    <step id="formatFileStep">
        <tasklet>
            <chunk reader="customerItemReader" writer="classifierWriter" commit-interval="10">
                <streams>
                    <stream ref="flatFileOutputWriter1"/>
                    <stream ref="flatFileOutputWriter2"/>
                </streams>
            </chunk>
        </tasklet>
    </step>

    <job id="formatJob" restartable="true">
        <step id="step1" parent="formatFileStep"/>
    </job>
</beans:beans>